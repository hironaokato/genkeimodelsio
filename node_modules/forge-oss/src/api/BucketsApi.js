/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PostBucketsPayload', 'model/Buckets', 'model/Reason', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PostBucketsPayload'), require('../model/Buckets'), require('../model/Reason'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.ForgeOss) {
      root.ForgeOss = {};
    }
    root.ForgeOss.BucketsApi = factory(root.ForgeOss.ApiClient, root.ForgeOss.PostBucketsPayload, root.ForgeOss.Buckets, root.ForgeOss.Reason, root.ForgeOss.InlineResponse200);
  }
}(this, function(ApiClient, PostBucketsPayload, Buckets, Reason, InlineResponse200) {
  'use strict';

  /**
   * Buckets service.
   * @module api/BucketsApi
   * @version 2.0.0
   */

  /**
   * Constructs a new BucketsApi. 
   * @alias module:api/BucketsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBucket operation.
     * @callback module:api/BucketsApi~createBucketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Buckets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket. 
     * @param {module:model/PostBucketsPayload} postBuckets Body Structure
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.xAdsRegion The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (default to US)
     * @param {module:api/BucketsApi~createBucketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Buckets}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Buckets}
     */
    this.createBucket = function(postBuckets, opts, callback) {
      opts = opts || {};
      var postBody = postBuckets;

      // verify the required parameter 'postBuckets' is set
      if (postBuckets == undefined || postBuckets == null) {
        throw "Missing the required parameter 'postBuckets' when calling createBucket";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'x-ads-region': opts['xAdsRegion']
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Buckets;

      return this.apiClient.callApi(
        '/oss/v2/buckets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBucket operation.
     * @callback module:api/BucketsApi~deleteBucketCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint will delete a bucket. 
     * @param {String} bucketKey URL-encoded bucket key
     * @param {module:api/BucketsApi~deleteBucketCallback} callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteBucket = function(bucketKey, callback) {
      var postBody = null;

      // verify the required parameter 'bucketKey' is set
      if (bucketKey == undefined || bucketKey == null) {
        throw "Missing the required parameter 'bucketKey' when calling deleteBucket";
      }


      var pathParams = {
        'bucketKey': bucketKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/oss/v2/buckets/{bucketKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBucketDetails operation.
     * @callback module:api/BucketsApi~getBucketDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Buckets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint will return the buckets owned by the application. This endpoint supports pagination.
     * @param {String} bucketKey URL-encoded bucket key
     * @param {module:api/BucketsApi~getBucketDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Buckets}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Buckets}
     */
    this.getBucketDetails = function(bucketKey, callback) {
      var postBody = null;

      // verify the required parameter 'bucketKey' is set
      if (bucketKey == undefined || bucketKey == null) {
        throw "Missing the required parameter 'bucketKey' when calling getBucketDetails";
      }


      var pathParams = {
        'bucketKey': bucketKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Buckets;

      return this.apiClient.callApi(
        '/oss/v2/buckets/{bucketKey}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuckets operation.
     * @callback module:api/BucketsApi~getBucketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint will return the buckets owned by the application. This endpoint supports pagination. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.region The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (default to US)
     * @param {Integer} opts.limit Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (default to 10)
     * @param {String} opts.startAt Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response 
     * @param {module:api/BucketsApi~getBucketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.getBuckets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'region': opts['region'],
        'limit': opts['limit'],
        'startAt': opts['startAt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_application'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/oss/v2/buckets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
